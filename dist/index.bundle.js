(self["webpackChunkbattleship_game"] = self["webpackChunkbattleship_game"] || []).push([["index"],{

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (() => {

// import './style.css';
var userBoard = document.querySelector('[data-user-board]');
var computerBoard = document.querySelector('[data-computer-board]');
var destroyer = document.querySelector('[data-destroyer-ship]');
var submarine = document.querySelector('[data-submarine-ship]');
var cruiser = document.querySelector('[data-cruiser-ship]');
var battleship = document.querySelector('[data-battleship-ship]');
var carrier = document.querySelector('[data-carrier-ship]');
var startButton = document.querySelector('[data-start-button]');
var rotateButton = document.querySelector('[data-rotate-button]');
var ships = document.querySelectorAll('.ship');
var shipsContainer = document.querySelector('[data-ships-container]');
var turnDisplay = document.querySelector('[data-turn-display]');
var infoDisplay = document.querySelector('[data-info-display]');
var playerSquares = [];
var computerSquares = [];
var width = 10;
var isHorizontal = true;
var isGameOver = false;
var currentPlayer = 'user';
var selectedShipNameWithIndex;
var draggedShip;
var draggedShipLength;
var playerTotal;
var computerTotal; // Create board

function displayBoard(grid, squares) {
  for (var i = 0; i < width * width; i += 1) {
    var square = document.createElement('div');
    square.dataset.id = i;
    grid.appendChild(square);
    squares.push(square);
  }
}

var createShips = function createShips() {
  return [{
    name: 'destroyer',
    directions: [[0, 1], [0, width]]
  }, {
    name: 'submarine',
    directions: [[0, 1, 2], [0, width, width * 2]]
  }, {
    name: 'cruiser',
    directions: [[0, 1, 2], [0, width, width * 2]]
  }, {
    name: 'battleship',
    directions: [[0, 1, 2, 3], [0, width, width * 2, width * 3]]
  }, {
    name: 'carrier',
    directions: [[0, 1, 2, 3, 4], [0, width, width * 2, width * 3, width * 4]]
  }];
};

function displayShipsRandom(ship) {
  var randomStart;
  var randomDirection = Math.floor(Math.random() * 2); // 0 or 1

  var current = ship.directions[randomDirection];

  if (randomDirection === 0) {
    randomStart = Math.abs(Math.floor(Math.random() * computerSquares.length - ship.directions[0].length * 1));
  } else {
    randomStart = Math.abs(Math.floor(Math.random() * computerSquares.length - ship.directions[0].length * 10));
  }

  var isTaken = current.some(function (index) {
    return computerSquares[randomStart + index].classList.contains('taken');
  });
  var isAtRightEdge = current.some(function (index) {
    return (randomStart + index) % width === width - 1;
  });
  var isAtLeftEdge = current.some(function (index) {
    return (randomStart + index) % width === 0;
  });

  if (!isTaken && !isAtRightEdge && !isAtLeftEdge) {
    current.forEach(function (index) {
      return computerSquares[randomStart + index].classList.add('taken', ship.name);
    });
  } else displayShipsRandom(ship);
}

function displayComputerShips(battleShips) {
  for (var i = 0; i < 5; i += 1) {
    displayShipsRandom(battleShips[i]);
  }
}

function rotateShips() {
  if (isHorizontal) {
    destroyer.classList.toggle('destroyer-container-vertical');
    submarine.classList.toggle('submarine-container-vertical');
    cruiser.classList.toggle('cruiser-container-vertical');
    battleship.classList.toggle('battleship-container-vertical');
    carrier.classList.toggle('carrier-container-vertical');
    isHorizontal = !isHorizontal;
  } else if (!isHorizontal) {
    destroyer.classList.toggle('destroyer-container-vertical');
    submarine.classList.toggle('submarine-container-vertical');
    cruiser.classList.toggle('cruiser-container-vertical');
    battleship.classList.toggle('battleship-container-vertical');
    carrier.classList.toggle('carrier-container-vertical');
    isHorizontal = !isHorizontal;
  }
}

function dragDrop() {
  // Get id of the last child of `${nameOfShip}-container`
  var shipNameWithLastId = draggedShip.lastElementChild.id; // Remove the last 2 letters of the string

  var shipClass = shipNameWithLastId.slice(0, -2); // Get the last letter of the string and convert to an Integer

  var lastShipIndex = parseInt(shipNameWithLastId.substr(-1), 10); // Last ship index - dataset of the div in which the div was placed

  var shipLastId = lastShipIndex + parseInt(this.dataset.id, 10);
  var notAllowedHorizontal = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 1, 11, 21, 31, 41, 51, 61, 71, 81, 91, 2, 22, 32, 42, 52, 62, 72, 82, 92, 3, 13, 23, 33, 43, 53, 63, 73, 83, 93];
  var notAllowedVertical = [99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60]; // Return an array containing the first x amount of items (x = 0, 10 * lastShipIndex)

  var newNotAllowedHorizontal = notAllowedHorizontal.splice(0, 10 * lastShipIndex);
  var newNotAllowedVertical = notAllowedVertical.splice(0, 10 * lastShipIndex); // Get id of the child of the ship-container that was "mousedown" then get last char

  var selectedShipIndex = parseInt(selectedShipNameWithIndex.substr(-1), 10);
  shipLastId -= selectedShipIndex;
  var shipHorizontal = [];
  var shipVertical = [];
  var isDivTaken;

  var checkArray = function checkArray(array) {
    if (array.includes(true)) return true;
    return false;
  };

  if (isHorizontal) {
    for (var i = 0; i < draggedShipLength; i += 1) {
      var isTaken = playerSquares[parseInt(this.dataset.id, 10) - selectedShipIndex + i].classList.contains('taken');
      shipHorizontal.push(isTaken);
      isDivTaken = checkArray(shipHorizontal);
    }
  } else if (!isHorizontal) {
    for (var _i = 0; _i < draggedShipLength; _i += 1) {
      var _isTaken = playerSquares[parseInt(this.dataset.id, 10) - selectedShipIndex + width * _i].classList.contains('taken');

      shipVertical.push(_isTaken);
      isDivTaken = checkArray(shipVertical);
    }
  }

  if (!isDivTaken && isHorizontal && !newNotAllowedHorizontal.includes(shipLastId)) {
    for (var _i2 = 0; _i2 < draggedShipLength; _i2 += 1) {
      playerSquares[parseInt(this.dataset.id, 10) - selectedShipIndex + _i2].classList.add('taken', shipClass);
    }
  } else if (!isDivTaken && !isHorizontal && !newNotAllowedVertical.includes(shipLastId)) {
    for (var _i3 = 0; _i3 < draggedShipLength; _i3 += 1) {
      playerSquares[parseInt(this.dataset.id, 10) - selectedShipIndex + width * _i3].classList.add('taken', shipClass);
    }
  } else return;

  shipsContainer.removeChild(draggedShip);
}

function dragStart() {
  draggedShip = this;
  draggedShipLength = this.children.length;
}

function preventEventDefault(e) {
  e.preventDefault();
}

function dragShips(ships) {
  ships.forEach(function (ship) {
    return ship.addEventListener('dragstart', dragStart);
  });
  ships.forEach(function (ship) {
    return ship.addEventListener('mousedown', function (e) {
      selectedShipNameWithIndex = e.target.id;
    });
  });
}

function dragSquares(playerSquares) {
  playerSquares.forEach(function (square) {
    return square.addEventListener('dragstart', dragStart);
  });
  playerSquares.forEach(function (square) {
    return square.addEventListener('dragover', preventEventDefault);
  });
  playerSquares.forEach(function (square) {
    return square.addEventListener('dragenter', preventEventDefault);
  });
  playerSquares.forEach(function (square) {
    return square.addEventListener('drop', dragDrop);
  });
}

function createShipsTally() {
  return {
    destroyer: 0,
    submarine: 0,
    cruiser: 0,
    battleship: 0,
    carrier: 0
  };
}

var playerScore = createShipsTally();
var computerScore = createShipsTally();

function changeTurn() {
  if (currentPlayer === 'computer') {
    currentPlayer = 'user';
  } else if (currentPlayer === 'user') {
    currentPlayer = 'computer';
  }
}

function checkHit(square) {
  if (square.classList.contains('boom')) {
    if (square.classList.contains('destroyer')) playerScore.destroyer += 1;
    if (square.classList.contains('submarine')) playerScore.submarine += 1;
    if (square.classList.contains('cruiser')) playerScore.cruiser += 1;
    if (square.classList.contains('battleship')) playerScore.battleship += 1;
    if (square.classList.contains('carrier')) playerScore.carrier += 1;
  }
}

function checkAccuracy(square) {
  if (!square.classList.contains('boom') && !square.classList.contains('miss')) {
    if (square.classList.contains('taken')) {
      square.classList.add('boom');
    } else {
      square.classList.add('miss');
    }

    checkHit(square);
    changeTurn();
  }
}

function revealSquare(square) {
  if (isGameOver) return;

  if (currentPlayer === 'user') {
    checkAccuracy(square);
    playTurn();
    checkForWins();
  }
}

function computerGo() {
  var random = Math.floor(Math.random() * playerSquares.length);

  if (!playerSquares[random].classList.contains('boom')) {
    playerSquares[random].classList.add('boom');

    if (playerSquares[random].classList.contains('destroyer')) {
      computerScore.destroyer += 1;
    }

    if (playerSquares[random].classList.contains('submarine')) {
      computerScore.submarine += 1;
    }

    if (playerSquares[random].classList.contains('cruiser')) {
      computerScore.cruiser += 1;
    }

    if (playerSquares[random].classList.contains('battleship')) {
      computerScore.battleship += 1;
    }

    if (playerSquares[random].classList.contains('carrier')) {
      computerScore.carrier += 1;
    }
  } else computerGo();

  currentPlayer = 'user';
  turnDisplay.innerHTML = 'Your Go';
}

function playTurn() {
  if (currentPlayer === 'user') {
    turnDisplay.innerHTML = 'Your Go';
  } else if (currentPlayer === 'computer') {
    turnDisplay.innerHTML = 'Computers Go';
    setTimeout(computerGo, 100);
    changeTurn();
  }
}

function playGame() {
  computerSquares.forEach(function (square) {
    return square.addEventListener('click', function () {
      revealSquare(square);
    });
  });
  playTurn();
}

function gameOver() {
  isGameOver = true;
  startButton.removeEventListener('click', playGame);
}

function runGame() {
  displayBoard(userBoard, playerSquares);
  displayBoard(computerBoard, computerSquares);
  var battleShips = createShips();
  displayComputerShips(battleShips);
  rotateButton.addEventListener('click', rotateShips);
  dragShips(ships);
  dragSquares(playerSquares);
  startButton.addEventListener('click', playGame);
}

runGame();

function checkComputerShips() {
  if (computerScore.destroyer === 2) {
    infoDisplay.innerHTML = 'Computer  sunk the computers Destroyer';
    computerScore.destroyer = 10;
  }

  if (computerScore.submarine === 3) {
    infoDisplay.innerHTML = 'Computer  sunk the computers Submarine';
    computerScore.submarine = 10;
  }

  if (computerScore.cruiser === 3) {
    infoDisplay.innerHTML = 'Computer  sunk the computers Cruiser';
    computerScore.cruiser = 10;
  }

  if (computerScore.battleship === 4) {
    infoDisplay.innerHTML = 'Computer  sunk the computers Battleship';
    computerScore.battleship = 10;
  }

  if (computerScore.carrier === 5) {
    infoDisplay.innerHTML = 'Computer sunk the computers Carrier';
    computerScore.carrier = 10;
  }
}

function checkPlayerShips() {
  if (playerScore.destroyer === 2) {
    infoDisplay.innerHTML = 'You sunk the computers destroyer';
    playerScore.destroyer = 10;
  }

  if (playerScore.submarine === 3) {
    infoDisplay.innerHTML = 'You sunk the computers submarine';
    playerScore.submarine = 10;
  }

  if (playerScore.cruiser === 3) {
    infoDisplay.innerHTML = 'You sunk the computers cruiser';
    playerScore.cruiser = 10;
  }

  if (playerScore.battleship === 4) {
    infoDisplay.innerHTML = 'You sunk the computers battleship';
    playerScore.battleship = 10;
  }

  if (playerScore.carrier === 5) {
    infoDisplay.innerHTML = 'You sunk the computers carrier';
    playerScore.carrier = 10;
  }
}

function checkShips() {
  checkPlayerShips();
  checkComputerShips();
  playerTotal = Object.values(playerScore).reduce(function (total, value) {
    return total + value;
  }, 0);
  console.log("Player Score: ".concat(playerTotal));
  computerTotal = Object.values(computerScore).reduce(function (total, value) {
    return total + value;
  }, 0);
  console.log("Computer Score: ".concat(computerTotal));
}

function checkForWins() {
  checkShips();

  if (playerTotal === 50) {
    infoDisplay.innerHTML = 'Player One Wins!';
    gameOver();
  } else if (computerTotal === 50) {
    infoDisplay.innerHTML = 'Computer Wins!';
    gameOver();
  }
}

/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ var __webpack_exports__ = (__webpack_exec__("./src/index.js"));
/******/ }
]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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bkIsV0FBZCxFQUEyQm9CLE1BQTNCLENBQWtDLFVBQUNDLEtBQUQsRUFBUUMsS0FBUjtJQUFBLE9BQWtCRCxLQUFLLEdBQUdDLEtBQTFCO0VBQUEsQ0FBbEMsRUFBbUUsQ0FBbkUsQ0FBZDtFQUNBQyxPQUFPLENBQUNDLEdBQVIseUJBQTZCOUYsV0FBN0I7RUFDQUMsYUFBYSxHQUFHdUYsTUFBTSxDQUFDQyxNQUFQLENBQWNsQixhQUFkLEVBQTZCbUIsTUFBN0IsQ0FBb0MsVUFBQ0MsS0FBRCxFQUFRQyxLQUFSO0lBQUEsT0FBa0JELEtBQUssR0FBR0MsS0FBMUI7RUFBQSxDQUFwQyxFQUFxRSxDQUFyRSxDQUFoQjtFQUNBQyxPQUFPLENBQUNDLEdBQVIsMkJBQStCN0YsYUFBL0I7QUFDRDs7QUFFRCxTQUFTNEUsWUFBVCxHQUF3QjtFQUN0QlUsVUFBVTs7RUFDVixJQUFJdkYsV0FBVyxLQUFLLEVBQXBCLEVBQXdCO0lBQ3RCVixXQUFXLENBQUN5RixTQUFaLEdBQXdCLGtCQUF4QjtJQUNBRyxRQUFRO0VBQ1QsQ0FIRCxNQUdPLElBQUlqRixhQUFhLEtBQUssRUFBdEIsRUFBMEI7SUFDL0JYLFdBQVcsQ0FBQ3lGLFNBQVosR0FBd0IsZ0JBQXhCO0lBQ0FHLFFBQVE7RUFDVDtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC1nYW1lLy4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGltcG9ydCAnLi9zdHlsZS5jc3MnO1xuXG5jb25zdCB1c2VyQm9hcmQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS11c2VyLWJvYXJkXScpO1xuY29uc3QgY29tcHV0ZXJCb2FyZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWNvbXB1dGVyLWJvYXJkXScpO1xuY29uc3QgZGVzdHJveWVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEtZGVzdHJveWVyLXNoaXBdJyk7XG5jb25zdCBzdWJtYXJpbmUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1zdWJtYXJpbmUtc2hpcF0nKTtcbmNvbnN0IGNydWlzZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1jcnVpc2VyLXNoaXBdJyk7XG5jb25zdCBiYXR0bGVzaGlwID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEtYmF0dGxlc2hpcC1zaGlwXScpO1xuY29uc3QgY2FycmllciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWNhcnJpZXItc2hpcF0nKTtcbmNvbnN0IHN0YXJ0QnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEtc3RhcnQtYnV0dG9uXScpO1xuY29uc3Qgcm90YXRlQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEtcm90YXRlLWJ1dHRvbl0nKTtcbmNvbnN0IHNoaXBzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnNoaXAnKTtcbmNvbnN0IHNoaXBzQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEtc2hpcHMtY29udGFpbmVyXScpO1xuY29uc3QgdHVybkRpc3BsYXkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS10dXJuLWRpc3BsYXldJyk7XG5jb25zdCBpbmZvRGlzcGxheSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWluZm8tZGlzcGxheV0nKTtcbmNvbnN0IHBsYXllclNxdWFyZXMgPSBbXTtcbmNvbnN0IGNvbXB1dGVyU3F1YXJlcyA9IFtdO1xuY29uc3Qgd2lkdGggPSAxMDtcbmxldCBpc0hvcml6b250YWwgPSB0cnVlO1xubGV0IGlzR2FtZU92ZXIgPSBmYWxzZTtcbmxldCBjdXJyZW50UGxheWVyID0gJ3VzZXInO1xubGV0IHNlbGVjdGVkU2hpcE5hbWVXaXRoSW5kZXg7XG5sZXQgZHJhZ2dlZFNoaXA7XG5sZXQgZHJhZ2dlZFNoaXBMZW5ndGg7XG5sZXQgcGxheWVyVG90YWw7XG5sZXQgY29tcHV0ZXJUb3RhbDtcblxuLy8gQ3JlYXRlIGJvYXJkXG5mdW5jdGlvbiBkaXNwbGF5Qm9hcmQoZ3JpZCwgc3F1YXJlcykge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHdpZHRoICogd2lkdGg7IGkgKz0gMSkge1xuICAgIGNvbnN0IHNxdWFyZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHNxdWFyZS5kYXRhc2V0LmlkID0gaTtcbiAgICBncmlkLmFwcGVuZENoaWxkKHNxdWFyZSk7XG4gICAgc3F1YXJlcy5wdXNoKHNxdWFyZSk7XG4gIH1cbn1cblxuY29uc3QgY3JlYXRlU2hpcHMgPSAoKSA9PiBbXG4gIHtcbiAgICBuYW1lOiAnZGVzdHJveWVyJyxcbiAgICBkaXJlY3Rpb25zOiBbXG4gICAgICBbMCwgMV0sXG4gICAgICBbMCwgd2lkdGhdLFxuICAgIF0sXG4gIH0sXG4gIHtcbiAgICBuYW1lOiAnc3VibWFyaW5lJyxcbiAgICBkaXJlY3Rpb25zOiBbXG4gICAgICBbMCwgMSwgMl0sXG4gICAgICBbMCwgd2lkdGgsIHdpZHRoICogMl0sXG4gICAgXSxcbiAgfSxcbiAge1xuICAgIG5hbWU6ICdjcnVpc2VyJyxcbiAgICBkaXJlY3Rpb25zOiBbXG4gICAgICBbMCwgMSwgMl0sXG4gICAgICBbMCwgd2lkdGgsIHdpZHRoICogMl0sXG4gICAgXSxcbiAgfSxcbiAge1xuICAgIG5hbWU6ICdiYXR0bGVzaGlwJyxcbiAgICBkaXJlY3Rpb25zOiBbXG4gICAgICBbMCwgMSwgMiwgM10sXG4gICAgICBbMCwgd2lkdGgsIHdpZHRoICogMiwgd2lkdGggKiAzXSxcbiAgICBdLFxuICB9LFxuICB7XG4gICAgbmFtZTogJ2NhcnJpZXInLFxuICAgIGRpcmVjdGlvbnM6IFtcbiAgICAgIFswLCAxLCAyLCAzLCA0XSxcbiAgICAgIFswLCB3aWR0aCwgd2lkdGggKiAyLCB3aWR0aCAqIDMsIHdpZHRoICogNF0sXG4gICAgXSxcbiAgfSxcbl07XG5cbmZ1bmN0aW9uIGRpc3BsYXlTaGlwc1JhbmRvbShzaGlwKSB7XG4gIGxldCByYW5kb21TdGFydDtcbiAgY29uc3QgcmFuZG9tRGlyZWN0aW9uID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMik7IC8vIDAgb3IgMVxuICBjb25zdCBjdXJyZW50ID0gc2hpcC5kaXJlY3Rpb25zW3JhbmRvbURpcmVjdGlvbl07XG4gIGlmIChyYW5kb21EaXJlY3Rpb24gPT09IDApIHtcbiAgICByYW5kb21TdGFydCA9IE1hdGguYWJzKFxuICAgICAgTWF0aC5mbG9vcihcbiAgICAgICAgTWF0aC5yYW5kb20oKSAqIGNvbXB1dGVyU3F1YXJlcy5sZW5ndGggLSBzaGlwLmRpcmVjdGlvbnNbMF0ubGVuZ3RoICogMSxcbiAgICAgICksXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICByYW5kb21TdGFydCA9IE1hdGguYWJzKFxuICAgICAgTWF0aC5mbG9vcihcbiAgICAgICAgTWF0aC5yYW5kb20oKSAqIGNvbXB1dGVyU3F1YXJlcy5sZW5ndGggLSBzaGlwLmRpcmVjdGlvbnNbMF0ubGVuZ3RoICogMTAsXG4gICAgICApLFxuICAgICk7XG4gIH1cbiAgY29uc3QgaXNUYWtlbiA9IGN1cnJlbnQuc29tZSgoaW5kZXgpID0+IGNvbXB1dGVyU3F1YXJlc1tyYW5kb21TdGFydCArIGluZGV4XS5jbGFzc0xpc3QuY29udGFpbnMoJ3Rha2VuJykpO1xuICBjb25zdCBpc0F0UmlnaHRFZGdlID0gY3VycmVudC5zb21lKFxuICAgIChpbmRleCkgPT4gKHJhbmRvbVN0YXJ0ICsgaW5kZXgpICUgd2lkdGggPT09IHdpZHRoIC0gMSxcbiAgKTtcbiAgY29uc3QgaXNBdExlZnRFZGdlID0gY3VycmVudC5zb21lKFxuICAgIChpbmRleCkgPT4gKHJhbmRvbVN0YXJ0ICsgaW5kZXgpICUgd2lkdGggPT09IDAsXG4gICk7XG5cbiAgaWYgKCFpc1Rha2VuICYmICFpc0F0UmlnaHRFZGdlICYmICFpc0F0TGVmdEVkZ2UpIHtcbiAgICBjdXJyZW50LmZvckVhY2goKGluZGV4KSA9PiBjb21wdXRlclNxdWFyZXNbcmFuZG9tU3RhcnQgKyBpbmRleF0uY2xhc3NMaXN0LmFkZCgndGFrZW4nLCBzaGlwLm5hbWUpKTtcbiAgfSBlbHNlIGRpc3BsYXlTaGlwc1JhbmRvbShzaGlwKTtcbn1cblxuZnVuY3Rpb24gZGlzcGxheUNvbXB1dGVyU2hpcHMoYmF0dGxlU2hpcHMpIHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCA1OyBpICs9IDEpIHtcbiAgICBkaXNwbGF5U2hpcHNSYW5kb20oYmF0dGxlU2hpcHNbaV0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJvdGF0ZVNoaXBzKCkge1xuICBpZiAoaXNIb3Jpem9udGFsKSB7XG4gICAgZGVzdHJveWVyLmNsYXNzTGlzdC50b2dnbGUoJ2Rlc3Ryb3llci1jb250YWluZXItdmVydGljYWwnKTtcbiAgICBzdWJtYXJpbmUuY2xhc3NMaXN0LnRvZ2dsZSgnc3VibWFyaW5lLWNvbnRhaW5lci12ZXJ0aWNhbCcpO1xuICAgIGNydWlzZXIuY2xhc3NMaXN0LnRvZ2dsZSgnY3J1aXNlci1jb250YWluZXItdmVydGljYWwnKTtcbiAgICBiYXR0bGVzaGlwLmNsYXNzTGlzdC50b2dnbGUoJ2JhdHRsZXNoaXAtY29udGFpbmVyLXZlcnRpY2FsJyk7XG4gICAgY2Fycmllci5jbGFzc0xpc3QudG9nZ2xlKCdjYXJyaWVyLWNvbnRhaW5lci12ZXJ0aWNhbCcpO1xuICAgIGlzSG9yaXpvbnRhbCA9ICFpc0hvcml6b250YWw7XG4gIH0gZWxzZSBpZiAoIWlzSG9yaXpvbnRhbCkge1xuICAgIGRlc3Ryb3llci5jbGFzc0xpc3QudG9nZ2xlKCdkZXN0cm95ZXItY29udGFpbmVyLXZlcnRpY2FsJyk7XG4gICAgc3VibWFyaW5lLmNsYXNzTGlzdC50b2dnbGUoJ3N1Ym1hcmluZS1jb250YWluZXItdmVydGljYWwnKTtcbiAgICBjcnVpc2VyLmNsYXNzTGlzdC50b2dnbGUoJ2NydWlzZXItY29udGFpbmVyLXZlcnRpY2FsJyk7XG4gICAgYmF0dGxlc2hpcC5jbGFzc0xpc3QudG9nZ2xlKCdiYXR0bGVzaGlwLWNvbnRhaW5lci12ZXJ0aWNhbCcpO1xuICAgIGNhcnJpZXIuY2xhc3NMaXN0LnRvZ2dsZSgnY2Fycmllci1jb250YWluZXItdmVydGljYWwnKTtcbiAgICBpc0hvcml6b250YWwgPSAhaXNIb3Jpem9udGFsO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRyYWdEcm9wKCkge1xuICAvLyBHZXQgaWQgb2YgdGhlIGxhc3QgY2hpbGQgb2YgYCR7bmFtZU9mU2hpcH0tY29udGFpbmVyYFxuICBjb25zdCBzaGlwTmFtZVdpdGhMYXN0SWQgPSBkcmFnZ2VkU2hpcC5sYXN0RWxlbWVudENoaWxkLmlkO1xuICAvLyBSZW1vdmUgdGhlIGxhc3QgMiBsZXR0ZXJzIG9mIHRoZSBzdHJpbmdcbiAgY29uc3Qgc2hpcENsYXNzID0gc2hpcE5hbWVXaXRoTGFzdElkLnNsaWNlKDAsIC0yKTtcbiAgLy8gR2V0IHRoZSBsYXN0IGxldHRlciBvZiB0aGUgc3RyaW5nIGFuZCBjb252ZXJ0IHRvIGFuIEludGVnZXJcbiAgY29uc3QgbGFzdFNoaXBJbmRleCA9IHBhcnNlSW50KHNoaXBOYW1lV2l0aExhc3RJZC5zdWJzdHIoLTEpLCAxMCk7XG4gIC8vIExhc3Qgc2hpcCBpbmRleCAtIGRhdGFzZXQgb2YgdGhlIGRpdiBpbiB3aGljaCB0aGUgZGl2IHdhcyBwbGFjZWRcbiAgbGV0IHNoaXBMYXN0SWQgPSBsYXN0U2hpcEluZGV4ICsgcGFyc2VJbnQodGhpcy5kYXRhc2V0LmlkLCAxMCk7XG4gIGNvbnN0IG5vdEFsbG93ZWRIb3Jpem9udGFsID0gW1xuICAgIDAsIDEwLCAyMCwgMzAsIDQwLCA1MCwgNjAsIDcwLCA4MCwgOTAsIDEsIDExLCAyMSwgMzEsIDQxLCA1MSwgNjEsIDcxLCA4MSxcbiAgICA5MSwgMiwgMjIsIDMyLCA0MiwgNTIsIDYyLCA3MiwgODIsIDkyLCAzLCAxMywgMjMsIDMzLCA0MywgNTMsIDYzLCA3MywgODMsXG4gICAgOTMsXG4gIF07XG4gIGNvbnN0IG5vdEFsbG93ZWRWZXJ0aWNhbCA9IFtcbiAgICA5OSwgOTgsIDk3LCA5NiwgOTUsIDk0LCA5MywgOTIsIDkxLCA5MCwgODksIDg4LCA4NywgODYsIDg1LCA4NCwgODMsIDgyLCA4MSxcbiAgICA4MCwgNzksIDc4LCA3NywgNzYsIDc1LCA3NCwgNzMsIDcyLCA3MSwgNzAsIDY5LCA2OCwgNjcsIDY2LCA2NSwgNjQsIDYzLCA2MixcbiAgICA2MSwgNjAsXG4gIF07XG4gIC8vIFJldHVybiBhbiBhcnJheSBjb250YWluaW5nIHRoZSBmaXJzdCB4IGFtb3VudCBvZiBpdGVtcyAoeCA9IDAsIDEwICogbGFzdFNoaXBJbmRleClcbiAgY29uc3QgbmV3Tm90QWxsb3dlZEhvcml6b250YWwgPSBub3RBbGxvd2VkSG9yaXpvbnRhbC5zcGxpY2UoXG4gICAgMCxcbiAgICAxMCAqIGxhc3RTaGlwSW5kZXgsXG4gICk7XG4gIGNvbnN0IG5ld05vdEFsbG93ZWRWZXJ0aWNhbCA9IG5vdEFsbG93ZWRWZXJ0aWNhbC5zcGxpY2UoXG4gICAgMCxcbiAgICAxMCAqIGxhc3RTaGlwSW5kZXgsXG4gICk7XG4gIC8vIEdldCBpZCBvZiB0aGUgY2hpbGQgb2YgdGhlIHNoaXAtY29udGFpbmVyIHRoYXQgd2FzIFwibW91c2Vkb3duXCIgdGhlbiBnZXQgbGFzdCBjaGFyXG4gIGNvbnN0IHNlbGVjdGVkU2hpcEluZGV4ID0gcGFyc2VJbnQoc2VsZWN0ZWRTaGlwTmFtZVdpdGhJbmRleC5zdWJzdHIoLTEpLCAxMCk7XG4gIHNoaXBMYXN0SWQgLT0gc2VsZWN0ZWRTaGlwSW5kZXg7XG5cbiAgY29uc3Qgc2hpcEhvcml6b250YWwgPSBbXTtcbiAgY29uc3Qgc2hpcFZlcnRpY2FsID0gW107XG4gIGxldCBpc0RpdlRha2VuO1xuXG4gIGNvbnN0IGNoZWNrQXJyYXkgPSAoYXJyYXkpID0+IHtcbiAgICBpZiAoYXJyYXkuaW5jbHVkZXModHJ1ZSkpIHJldHVybiB0cnVlO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICBpZiAoaXNIb3Jpem9udGFsKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkcmFnZ2VkU2hpcExlbmd0aDsgaSArPSAxKSB7XG4gICAgICBjb25zdCBpc1Rha2VuID0gcGxheWVyU3F1YXJlc1tcbiAgICAgICAgcGFyc2VJbnQodGhpcy5kYXRhc2V0LmlkLCAxMCkgLSBzZWxlY3RlZFNoaXBJbmRleCArIGlcbiAgICAgIF0uY2xhc3NMaXN0LmNvbnRhaW5zKCd0YWtlbicpO1xuICAgICAgc2hpcEhvcml6b250YWwucHVzaChpc1Rha2VuKTtcbiAgICAgIGlzRGl2VGFrZW4gPSBjaGVja0FycmF5KHNoaXBIb3Jpem9udGFsKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoIWlzSG9yaXpvbnRhbCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZHJhZ2dlZFNoaXBMZW5ndGg7IGkgKz0gMSkge1xuICAgICAgY29uc3QgaXNUYWtlbiA9IHBsYXllclNxdWFyZXNbXG4gICAgICAgIHBhcnNlSW50KHRoaXMuZGF0YXNldC5pZCwgMTApIC0gc2VsZWN0ZWRTaGlwSW5kZXggKyB3aWR0aCAqIGlcbiAgICAgIF0uY2xhc3NMaXN0LmNvbnRhaW5zKCd0YWtlbicpO1xuICAgICAgc2hpcFZlcnRpY2FsLnB1c2goaXNUYWtlbik7XG4gICAgICBpc0RpdlRha2VuID0gY2hlY2tBcnJheShzaGlwVmVydGljYWwpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChcbiAgICAhaXNEaXZUYWtlblxuICAgICYmIGlzSG9yaXpvbnRhbFxuICAgICYmICFuZXdOb3RBbGxvd2VkSG9yaXpvbnRhbC5pbmNsdWRlcyhzaGlwTGFzdElkKVxuICApIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRyYWdnZWRTaGlwTGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIHBsYXllclNxdWFyZXNbXG4gICAgICAgIHBhcnNlSW50KHRoaXMuZGF0YXNldC5pZCwgMTApIC0gc2VsZWN0ZWRTaGlwSW5kZXggKyBpXG4gICAgICBdLmNsYXNzTGlzdC5hZGQoJ3Rha2VuJywgc2hpcENsYXNzKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoXG4gICAgIWlzRGl2VGFrZW5cbiAgICAmJiAhaXNIb3Jpem9udGFsXG4gICAgJiYgIW5ld05vdEFsbG93ZWRWZXJ0aWNhbC5pbmNsdWRlcyhzaGlwTGFzdElkKVxuICApIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRyYWdnZWRTaGlwTGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIHBsYXllclNxdWFyZXNbXG4gICAgICAgIHBhcnNlSW50KHRoaXMuZGF0YXNldC5pZCwgMTApIC0gc2VsZWN0ZWRTaGlwSW5kZXggKyB3aWR0aCAqIGlcbiAgICAgIF0uY2xhc3NMaXN0LmFkZCgndGFrZW4nLCBzaGlwQ2xhc3MpO1xuICAgIH1cbiAgfSBlbHNlIHJldHVybjtcblxuICBzaGlwc0NvbnRhaW5lci5yZW1vdmVDaGlsZChkcmFnZ2VkU2hpcCk7XG59XG5cbmZ1bmN0aW9uIGRyYWdTdGFydCgpIHtcbiAgZHJhZ2dlZFNoaXAgPSB0aGlzO1xuICBkcmFnZ2VkU2hpcExlbmd0aCA9IHRoaXMuY2hpbGRyZW4ubGVuZ3RoO1xufVxuXG5mdW5jdGlvbiBwcmV2ZW50RXZlbnREZWZhdWx0KGUpIHtcbiAgZS5wcmV2ZW50RGVmYXVsdCgpO1xufVxuXG5mdW5jdGlvbiBkcmFnU2hpcHMoc2hpcHMpIHtcbiAgc2hpcHMuZm9yRWFjaCgoc2hpcCkgPT4gc2hpcC5hZGRFdmVudExpc3RlbmVyKCdkcmFnc3RhcnQnLCBkcmFnU3RhcnQpKTtcbiAgc2hpcHMuZm9yRWFjaCgoc2hpcCkgPT4gc2hpcC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCAoZSkgPT4ge1xuICAgIHNlbGVjdGVkU2hpcE5hbWVXaXRoSW5kZXggPSBlLnRhcmdldC5pZDtcbiAgfSkpO1xufVxuXG5mdW5jdGlvbiBkcmFnU3F1YXJlcyhwbGF5ZXJTcXVhcmVzKSB7XG4gIHBsYXllclNxdWFyZXMuZm9yRWFjaCgoc3F1YXJlKSA9PiBzcXVhcmUuYWRkRXZlbnRMaXN0ZW5lcignZHJhZ3N0YXJ0JywgZHJhZ1N0YXJ0KSk7XG4gIHBsYXllclNxdWFyZXMuZm9yRWFjaCgoc3F1YXJlKSA9PiBzcXVhcmUuYWRkRXZlbnRMaXN0ZW5lcignZHJhZ292ZXInLCBwcmV2ZW50RXZlbnREZWZhdWx0KSk7XG4gIHBsYXllclNxdWFyZXMuZm9yRWFjaCgoc3F1YXJlKSA9PiBzcXVhcmUuYWRkRXZlbnRMaXN0ZW5lcignZHJhZ2VudGVyJywgcHJldmVudEV2ZW50RGVmYXVsdCkpO1xuICBwbGF5ZXJTcXVhcmVzLmZvckVhY2goKHNxdWFyZSkgPT4gc3F1YXJlLmFkZEV2ZW50TGlzdGVuZXIoJ2Ryb3AnLCBkcmFnRHJvcCkpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVTaGlwc1RhbGx5KCkge1xuICByZXR1cm4ge1xuICAgIGRlc3Ryb3llcjogMCxcbiAgICBzdWJtYXJpbmU6IDAsXG4gICAgY3J1aXNlcjogMCxcbiAgICBiYXR0bGVzaGlwOiAwLFxuICAgIGNhcnJpZXI6IDAsXG4gIH07XG59XG5cbmNvbnN0IHBsYXllclNjb3JlID0gY3JlYXRlU2hpcHNUYWxseSgpO1xuY29uc3QgY29tcHV0ZXJTY29yZSA9IGNyZWF0ZVNoaXBzVGFsbHkoKTtcblxuZnVuY3Rpb24gY2hhbmdlVHVybigpIHtcbiAgaWYgKGN1cnJlbnRQbGF5ZXIgPT09ICdjb21wdXRlcicpIHtcbiAgICBjdXJyZW50UGxheWVyID0gJ3VzZXInO1xuICB9IGVsc2UgaWYgKGN1cnJlbnRQbGF5ZXIgPT09ICd1c2VyJykge1xuICAgIGN1cnJlbnRQbGF5ZXIgPSAnY29tcHV0ZXInO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNoZWNrSGl0KHNxdWFyZSkge1xuICBpZiAoc3F1YXJlLmNsYXNzTGlzdC5jb250YWlucygnYm9vbScpKSB7XG4gICAgaWYgKHNxdWFyZS5jbGFzc0xpc3QuY29udGFpbnMoJ2Rlc3Ryb3llcicpKSBwbGF5ZXJTY29yZS5kZXN0cm95ZXIgKz0gMTtcbiAgICBpZiAoc3F1YXJlLmNsYXNzTGlzdC5jb250YWlucygnc3VibWFyaW5lJykpIHBsYXllclNjb3JlLnN1Ym1hcmluZSArPSAxO1xuICAgIGlmIChzcXVhcmUuY2xhc3NMaXN0LmNvbnRhaW5zKCdjcnVpc2VyJykpIHBsYXllclNjb3JlLmNydWlzZXIgKz0gMTtcbiAgICBpZiAoc3F1YXJlLmNsYXNzTGlzdC5jb250YWlucygnYmF0dGxlc2hpcCcpKSBwbGF5ZXJTY29yZS5iYXR0bGVzaGlwICs9IDE7XG4gICAgaWYgKHNxdWFyZS5jbGFzc0xpc3QuY29udGFpbnMoJ2NhcnJpZXInKSkgcGxheWVyU2NvcmUuY2FycmllciArPSAxO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNoZWNrQWNjdXJhY3koc3F1YXJlKSB7XG4gIGlmICghc3F1YXJlLmNsYXNzTGlzdC5jb250YWlucygnYm9vbScpICYmICFzcXVhcmUuY2xhc3NMaXN0LmNvbnRhaW5zKCdtaXNzJykpIHtcbiAgICBpZiAoc3F1YXJlLmNsYXNzTGlzdC5jb250YWlucygndGFrZW4nKSkge1xuICAgICAgc3F1YXJlLmNsYXNzTGlzdC5hZGQoJ2Jvb20nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3F1YXJlLmNsYXNzTGlzdC5hZGQoJ21pc3MnKTtcbiAgICB9XG4gICAgY2hlY2tIaXQoc3F1YXJlKTtcbiAgICBjaGFuZ2VUdXJuKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmV2ZWFsU3F1YXJlKHNxdWFyZSkge1xuICBpZiAoaXNHYW1lT3ZlcikgcmV0dXJuO1xuICBpZiAoY3VycmVudFBsYXllciA9PT0gJ3VzZXInKSB7XG4gICAgY2hlY2tBY2N1cmFjeShzcXVhcmUpO1xuICAgIHBsYXlUdXJuKCk7XG4gICAgY2hlY2tGb3JXaW5zKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY29tcHV0ZXJHbygpIHtcbiAgY29uc3QgcmFuZG9tID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcGxheWVyU3F1YXJlcy5sZW5ndGgpO1xuICBpZiAoIXBsYXllclNxdWFyZXNbcmFuZG9tXS5jbGFzc0xpc3QuY29udGFpbnMoJ2Jvb20nKSkge1xuICAgIHBsYXllclNxdWFyZXNbcmFuZG9tXS5jbGFzc0xpc3QuYWRkKCdib29tJyk7XG4gICAgaWYgKHBsYXllclNxdWFyZXNbcmFuZG9tXS5jbGFzc0xpc3QuY29udGFpbnMoJ2Rlc3Ryb3llcicpKSB7XG4gICAgICBjb21wdXRlclNjb3JlLmRlc3Ryb3llciArPSAxO1xuICAgIH1cbiAgICBpZiAocGxheWVyU3F1YXJlc1tyYW5kb21dLmNsYXNzTGlzdC5jb250YWlucygnc3VibWFyaW5lJykpIHtcbiAgICAgIGNvbXB1dGVyU2NvcmUuc3VibWFyaW5lICs9IDE7XG4gICAgfVxuICAgIGlmIChwbGF5ZXJTcXVhcmVzW3JhbmRvbV0uY2xhc3NMaXN0LmNvbnRhaW5zKCdjcnVpc2VyJykpIHtcbiAgICAgIGNvbXB1dGVyU2NvcmUuY3J1aXNlciArPSAxO1xuICAgIH1cbiAgICBpZiAocGxheWVyU3F1YXJlc1tyYW5kb21dLmNsYXNzTGlzdC5jb250YWlucygnYmF0dGxlc2hpcCcpKSB7XG4gICAgICBjb21wdXRlclNjb3JlLmJhdHRsZXNoaXAgKz0gMTtcbiAgICB9XG4gICAgaWYgKHBsYXllclNxdWFyZXNbcmFuZG9tXS5jbGFzc0xpc3QuY29udGFpbnMoJ2NhcnJpZXInKSkge1xuICAgICAgY29tcHV0ZXJTY29yZS5jYXJyaWVyICs9IDE7XG4gICAgfVxuICB9IGVsc2UgY29tcHV0ZXJHbygpO1xuICBjdXJyZW50UGxheWVyID0gJ3VzZXInO1xuICB0dXJuRGlzcGxheS5pbm5lckhUTUwgPSAnWW91ciBHbyc7XG59XG5cbmZ1bmN0aW9uIHBsYXlUdXJuKCkge1xuICBpZiAoY3VycmVudFBsYXllciA9PT0gJ3VzZXInKSB7XG4gICAgdHVybkRpc3BsYXkuaW5uZXJIVE1MID0gJ1lvdXIgR28nO1xuICB9IGVsc2UgaWYgKGN1cnJlbnRQbGF5ZXIgPT09ICdjb21wdXRlcicpIHtcbiAgICB0dXJuRGlzcGxheS5pbm5lckhUTUwgPSAnQ29tcHV0ZXJzIEdvJztcbiAgICBzZXRUaW1lb3V0KGNvbXB1dGVyR28sIDEwMCk7XG4gICAgY2hhbmdlVHVybigpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHBsYXlHYW1lKCkge1xuICBjb21wdXRlclNxdWFyZXMuZm9yRWFjaCgoc3F1YXJlKSA9PiBzcXVhcmUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgcmV2ZWFsU3F1YXJlKHNxdWFyZSk7XG4gIH0pKTtcbiAgcGxheVR1cm4oKTtcbn1cblxuZnVuY3Rpb24gZ2FtZU92ZXIoKSB7XG4gIGlzR2FtZU92ZXIgPSB0cnVlO1xuICBzdGFydEJ1dHRvbi5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHBsYXlHYW1lKTtcbn1cblxuZnVuY3Rpb24gcnVuR2FtZSgpIHtcbiAgZGlzcGxheUJvYXJkKHVzZXJCb2FyZCwgcGxheWVyU3F1YXJlcyk7XG4gIGRpc3BsYXlCb2FyZChjb21wdXRlckJvYXJkLCBjb21wdXRlclNxdWFyZXMpO1xuICBjb25zdCBiYXR0bGVTaGlwcyA9IGNyZWF0ZVNoaXBzKCk7XG4gIGRpc3BsYXlDb21wdXRlclNoaXBzKGJhdHRsZVNoaXBzKTtcbiAgcm90YXRlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgcm90YXRlU2hpcHMpO1xuICBkcmFnU2hpcHMoc2hpcHMpO1xuICBkcmFnU3F1YXJlcyhwbGF5ZXJTcXVhcmVzKTtcbiAgc3RhcnRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBwbGF5R2FtZSk7XG59XG5cbnJ1bkdhbWUoKTtcblxuZnVuY3Rpb24gY2hlY2tDb21wdXRlclNoaXBzKCkge1xuICBpZiAoY29tcHV0ZXJTY29yZS5kZXN0cm95ZXIgPT09IDIpIHtcbiAgICBpbmZvRGlzcGxheS5pbm5lckhUTUwgPSAnQ29tcHV0ZXIgIHN1bmsgdGhlIGNvbXB1dGVycyBEZXN0cm95ZXInO1xuICAgIGNvbXB1dGVyU2NvcmUuZGVzdHJveWVyID0gMTA7XG4gIH1cbiAgaWYgKGNvbXB1dGVyU2NvcmUuc3VibWFyaW5lID09PSAzKSB7XG4gICAgaW5mb0Rpc3BsYXkuaW5uZXJIVE1MID0gJ0NvbXB1dGVyICBzdW5rIHRoZSBjb21wdXRlcnMgU3VibWFyaW5lJztcbiAgICBjb21wdXRlclNjb3JlLnN1Ym1hcmluZSA9IDEwO1xuICB9XG4gIGlmIChjb21wdXRlclNjb3JlLmNydWlzZXIgPT09IDMpIHtcbiAgICBpbmZvRGlzcGxheS5pbm5lckhUTUwgPSAnQ29tcHV0ZXIgIHN1bmsgdGhlIGNvbXB1dGVycyBDcnVpc2VyJztcbiAgICBjb21wdXRlclNjb3JlLmNydWlzZXIgPSAxMDtcbiAgfVxuICBpZiAoY29tcHV0ZXJTY29yZS5iYXR0bGVzaGlwID09PSA0KSB7XG4gICAgaW5mb0Rpc3BsYXkuaW5uZXJIVE1MID0gJ0NvbXB1dGVyICBzdW5rIHRoZSBjb21wdXRlcnMgQmF0dGxlc2hpcCc7XG4gICAgY29tcHV0ZXJTY29yZS5iYXR0bGVzaGlwID0gMTA7XG4gIH1cbiAgaWYgKGNvbXB1dGVyU2NvcmUuY2FycmllciA9PT0gNSkge1xuICAgIGluZm9EaXNwbGF5LmlubmVySFRNTCA9ICdDb21wdXRlciBzdW5rIHRoZSBjb21wdXRlcnMgQ2Fycmllcic7XG4gICAgY29tcHV0ZXJTY29yZS5jYXJyaWVyID0gMTA7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tQbGF5ZXJTaGlwcygpIHtcbiAgaWYgKHBsYXllclNjb3JlLmRlc3Ryb3llciA9PT0gMikge1xuICAgIGluZm9EaXNwbGF5LmlubmVySFRNTCA9ICdZb3Ugc3VuayB0aGUgY29tcHV0ZXJzIGRlc3Ryb3llcic7XG4gICAgcGxheWVyU2NvcmUuZGVzdHJveWVyID0gMTA7XG4gIH1cbiAgaWYgKHBsYXllclNjb3JlLnN1Ym1hcmluZSA9PT0gMykge1xuICAgIGluZm9EaXNwbGF5LmlubmVySFRNTCA9ICdZb3Ugc3VuayB0aGUgY29tcHV0ZXJzIHN1Ym1hcmluZSc7XG4gICAgcGxheWVyU2NvcmUuc3VibWFyaW5lID0gMTA7XG4gIH1cbiAgaWYgKHBsYXllclNjb3JlLmNydWlzZXIgPT09IDMpIHtcbiAgICBpbmZvRGlzcGxheS5pbm5lckhUTUwgPSAnWW91IHN1bmsgdGhlIGNvbXB1dGVycyBjcnVpc2VyJztcbiAgICBwbGF5ZXJTY29yZS5jcnVpc2VyID0gMTA7XG4gIH1cbiAgaWYgKHBsYXllclNjb3JlLmJhdHRsZXNoaXAgPT09IDQpIHtcbiAgICBpbmZvRGlzcGxheS5pbm5lckhUTUwgPSAnWW91IHN1bmsgdGhlIGNvbXB1dGVycyBiYXR0bGVzaGlwJztcbiAgICBwbGF5ZXJTY29yZS5iYXR0bGVzaGlwID0gMTA7XG4gIH1cbiAgaWYgKHBsYXllclNjb3JlLmNhcnJpZXIgPT09IDUpIHtcbiAgICBpbmZvRGlzcGxheS5pbm5lckhUTUwgPSAnWW91IHN1bmsgdGhlIGNvbXB1dGVycyBjYXJyaWVyJztcbiAgICBwbGF5ZXJTY29yZS5jYXJyaWVyID0gMTA7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tTaGlwcygpIHtcbiAgY2hlY2tQbGF5ZXJTaGlwcygpO1xuICBjaGVja0NvbXB1dGVyU2hpcHMoKTtcbiAgcGxheWVyVG90YWwgPSBPYmplY3QudmFsdWVzKHBsYXllclNjb3JlKS5yZWR1Y2UoKHRvdGFsLCB2YWx1ZSkgPT4gdG90YWwgKyB2YWx1ZSwgMCk7XG4gIGNvbnNvbGUubG9nKGBQbGF5ZXIgU2NvcmU6ICR7cGxheWVyVG90YWx9YCk7XG4gIGNvbXB1dGVyVG90YWwgPSBPYmplY3QudmFsdWVzKGNvbXB1dGVyU2NvcmUpLnJlZHVjZSgodG90YWwsIHZhbHVlKSA9PiB0b3RhbCArIHZhbHVlLCAwKTtcbiAgY29uc29sZS5sb2coYENvbXB1dGVyIFNjb3JlOiAke2NvbXB1dGVyVG90YWx9YCk7XG59XG5cbmZ1bmN0aW9uIGNoZWNrRm9yV2lucygpIHtcbiAgY2hlY2tTaGlwcygpO1xuICBpZiAocGxheWVyVG90YWwgPT09IDUwKSB7XG4gICAgaW5mb0Rpc3BsYXkuaW5uZXJIVE1MID0gJ1BsYXllciBPbmUgV2lucyEnO1xuICAgIGdhbWVPdmVyKCk7XG4gIH0gZWxzZSBpZiAoY29tcHV0ZXJUb3RhbCA9PT0gNTApIHtcbiAgICBpbmZvRGlzcGxheS5pbm5lckhUTUwgPSAnQ29tcHV0ZXIgV2lucyEnO1xuICAgIGdhbWVPdmVyKCk7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJ1c2VyQm9hcmQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJjb21wdXRlckJvYXJkIiwiZGVzdHJveWVyIiwic3VibWFyaW5lIiwiY3J1aXNlciIsImJhdHRsZXNoaXAiLCJjYXJyaWVyIiwic3RhcnRCdXR0b24iLCJyb3RhdGVCdXR0b24iLCJzaGlwcyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJzaGlwc0NvbnRhaW5lciIsInR1cm5EaXNwbGF5IiwiaW5mb0Rpc3BsYXkiLCJwbGF5ZXJTcXVhcmVzIiwiY29tcHV0ZXJTcXVhcmVzIiwid2lkdGgiLCJpc0hvcml6b250YWwiLCJpc0dhbWVPdmVyIiwiY3VycmVudFBsYXllciIsInNlbGVjdGVkU2hpcE5hbWVXaXRoSW5kZXgiLCJkcmFnZ2VkU2hpcCIsImRyYWdnZWRTaGlwTGVuZ3RoIiwicGxheWVyVG90YWwiLCJjb21wdXRlclRvdGFsIiwiZGlzcGxheUJvYXJkIiwiZ3JpZCIsInNxdWFyZXMiLCJpIiwic3F1YXJlIiwiY3JlYXRlRWxlbWVudCIsImRhdGFzZXQiLCJpZCIsImFwcGVuZENoaWxkIiwicHVzaCIsImNyZWF0ZVNoaXBzIiwibmFtZSIsImRpcmVjdGlvbnMiLCJkaXNwbGF5U2hpcHNSYW5kb20iLCJzaGlwIiwicmFuZG9tU3RhcnQiLCJyYW5kb21EaXJlY3Rpb24iLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJjdXJyZW50IiwiYWJzIiwibGVuZ3RoIiwiaXNUYWtlbiIsInNvbWUiLCJpbmRleCIsImNsYXNzTGlzdCIsImNvbnRhaW5zIiwiaXNBdFJpZ2h0RWRnZSIsImlzQXRMZWZ0RWRnZSIsImZvckVhY2giLCJhZGQiLCJkaXNwbGF5Q29tcHV0ZXJTaGlwcyIsImJhdHRsZVNoaXBzIiwicm90YXRlU2hpcHMiLCJ0b2dnbGUiLCJkcmFnRHJvcCIsInNoaXBOYW1lV2l0aExhc3RJZCIsImxhc3RFbGVtZW50Q2hpbGQiLCJzaGlwQ2xhc3MiLCJzbGljZSIsImxhc3RTaGlwSW5kZXgiLCJwYXJzZUludCIsInN1YnN0ciIsInNoaXBMYXN0SWQiLCJub3RBbGxvd2VkSG9yaXpvbnRhbCIsIm5vdEFsbG93ZWRWZXJ0aWNhbCIsIm5ld05vdEFsbG93ZWRIb3Jpem9udGFsIiwic3BsaWNlIiwibmV3Tm90QWxsb3dlZFZlcnRpY2FsIiwic2VsZWN0ZWRTaGlwSW5kZXgiLCJzaGlwSG9yaXpvbnRhbCIsInNoaXBWZXJ0aWNhbCIsImlzRGl2VGFrZW4iLCJjaGVja0FycmF5IiwiYXJyYXkiLCJpbmNsdWRlcyIsInJlbW92ZUNoaWxkIiwiZHJhZ1N0YXJ0IiwiY2hpbGRyZW4iLCJwcmV2ZW50RXZlbnREZWZhdWx0IiwiZSIsInByZXZlbnREZWZhdWx0IiwiZHJhZ1NoaXBzIiwiYWRkRXZlbnRMaXN0ZW5lciIsInRhcmdldCIsImRyYWdTcXVhcmVzIiwiY3JlYXRlU2hpcHNUYWxseSIsInBsYXllclNjb3JlIiwiY29tcHV0ZXJTY29yZSIsImNoYW5nZVR1cm4iLCJjaGVja0hpdCIsImNoZWNrQWNjdXJhY3kiLCJyZXZlYWxTcXVhcmUiLCJwbGF5VHVybiIsImNoZWNrRm9yV2lucyIsImNvbXB1dGVyR28iLCJpbm5lckhUTUwiLCJzZXRUaW1lb3V0IiwicGxheUdhbWUiLCJnYW1lT3ZlciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJydW5HYW1lIiwiY2hlY2tDb21wdXRlclNoaXBzIiwiY2hlY2tQbGF5ZXJTaGlwcyIsImNoZWNrU2hpcHMiLCJPYmplY3QiLCJ2YWx1ZXMiLCJyZWR1Y2UiLCJ0b3RhbCIsInZhbHVlIiwiY29uc29sZSIsImxvZyJdLCJzb3VyY2VSb290IjoiIn0=